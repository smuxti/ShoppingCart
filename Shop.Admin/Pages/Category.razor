@page "/category"

@using Shop.DataModels.CustomModels;
@inject NavigationManager Navmanager;
@using Shop.Admin.Services;
@inject IAdminPanelService AdminPanelService;


<style>
    .modal {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow:hidden;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        display: block;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        overflow: hidden;
    }

    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>

@if (categoryModel == null)
{
    <p><em>Loading... :P</em></p>
}
else
{
    <div class="card">
        <h4 class="card-header">Category</h4>
    </div>
    <div class="card-body">
        <EditForm Model="@categoryModel" OnValidSubmit="SaveCategory">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="form-row">
                <div class="form-group col-5">
                    <label>Name :</label>
                    <InputText @bind-Value="categoryModel.Name " class="form-control"></InputText>
                    <ValidationMessage For="@(()=>categoryModel.Name)" />
                </div>
            </div>
            <div class="text-left">
                <input type="submit" class="btn btn-primary" value="Save" />
                <input type="button" class="btn btn-primary" value="Clear" @onclick="ClearForm" />
            </div>

        </EditForm>
        <div>
            @if (categoryList == null)
            {
                <p><em>Loading... :P</em></p>

            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Sr.No</th>
                            <th>Category Name</th>
                            <th>Edit?</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var (index, cat) in categoryList.Select((cat, i) => (i + 1, cat)))
                        {
                            <tr>
                                <td>@index</td>
                                <td>@cat.Name</td>
                                <td><input type="button" class="btn btn-primary" value="Edit" @onclick="(()=>EditButtonClick(cat))" /></td>
                                <td><input type="button" class="btn btn-primary" value="Delete" @onclick="(()=>DeleteButtonClick(cat))" /></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </div>
    </div>
}
@if (showEditPopup == true)
{
    <div class="modal">
        <div class=" modal-content">
            <div class="modal-header">
                <h5>Edit Category</h5>
                <span class="close" @onclick="ToggleEditPopup">&times;</span>
            </div>
            <div class="modal-body">
                <EditForm Model="@categoryToUpdate" OnValidSubmit="UpdateCategory">
                    <DataAnnotationsValidator />
                    <div class="form-row">
                        <div class="form-group col-5">
                            <label>Name :</label>
                            <InputText @bind-Value="categoryToUpdate.Name" class="form-control" />
                            <ValidationMessage For="@(()=> categoryToUpdate.Name )" />

                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Update" @onclick="UpdateCategory" />
                <input type="button" class="btn btn-primary" value="Cancel" @onclick="ToggleEditPopup" />
            </div>
        </div>

    </div>
}

@if (showDeletePopup == true)
{
    <div class="modal">
        <div class=" modal-content">
            <div class="modal-header">
                <h5>Delete Category</h5>
                <span class="close" @onclick="ToggleDeletePopup">&times;</span>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <span style="background-color:yellow">@categoryToDelete.Name?</span> Category
            </div>
            <div class="modal-footer">

                <input type="button" class="btn btn-primary" value="Yes" @onclick="DeleteCategory" />
                <input type="button" class="btn btn-primary" value="No" @onclick="ToggleDeletePopup" />
            </div>
        </div>

    </div>
}

@if (SuccessPopup == true)
{
    <div class="modal">
        <div class=" modal-content">
            <div class="modal-header">  
              Alert <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
            </div>
        </div>
    </div>
}



@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public CategoryModel categoryModel { get; set; }
    public List<CategoryModel> categoryList { get; set; }
    public CategoryModel categoryToUpdate { get; set; }
    public CategoryModel categoryToDelete { get; set; }
    public bool showEditPopup = false;
    public bool showDeletePopup = false;
    public bool SuccessPopup = false;
    public string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        categoryModel = new CategoryModel();
        await GetCategories();
        ClearForm();
    }

    private async Task SaveCategory()
    {
        await AdminPanelService.SaveCatgory(categoryModel);
        Message = "Category Added Succesfully";
        ToggleSuccessPopup();
        categoryModel = new CategoryModel();
        await GetCategories();
    }

    private async Task UpdateCategory()
    {
        bool flag = await AdminPanelService.UpdateCategory(categoryToUpdate);
        ToggleEditPopup();
        if(flag)
        {
            Message = "Category update successfully";
        }
        else
        {
            Message = "category not updated try again";
        }
        ToggleSuccessPopup();
        categoryToUpdate = new CategoryModel();
        await GetCategories();
    }

    private async Task DeleteCategory()
    {
        bool flag = await AdminPanelService.DeleteCategory(categoryToDelete);
        ToggleDeletePopup();
        if (flag)
        {
            Message = "Category update successfully";
        }
        else
        {
            Message = "category not updated try again";
        }
        ToggleSuccessPopup();
        categoryToUpdate = new CategoryModel();
        await GetCategories();
    }

    private async Task GetCategories()
    {
        categoryList = await AdminPanelService.GetCategories();
    }

    private void ClearForm()
    {
        categoryModel = new CategoryModel();

    }

    private void EditButtonClick(CategoryModel _cat)
    {

        categoryToUpdate = _cat;
        ToggleEditPopup();
    }

    private void DeleteButtonClick(CategoryModel _cat)
    {
        categoryToDelete = _cat;
        ToggleDeletePopup();
    }

    private void ToggleEditPopup()
    {
        showEditPopup = showEditPopup == true ? false : true;
    }

    private void ToggleDeletePopup()
    {
        showDeletePopup = showDeletePopup == true ? false : true;
    }

    private void ToggleSuccessPopup()
    {
        SuccessPopup = SuccessPopup ==true ? false : true;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }

}
