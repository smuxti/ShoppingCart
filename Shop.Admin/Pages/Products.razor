@page "/products"
@using Shop.DataModels.CustomModels;
@inject NavigationManager Navmanager;
@using Shop.Admin.Services;
@inject IAdminPanelService AdminPanelService;
@using System.IO;


<style>
    .modal {
        position: fixed;
        z-index: 1;
        padding-top: 100px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        display: block;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 50%;
        overflow: hidden;
    }

    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .clos:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>

@if (productModel == null)
{
    <p><em>Loading... :P</em></p>
}
else
{
    <div class="card">
        <h4 class="card-header"> Product </h4>
        <div class="card-body">
            <EditForm Model="@productModel" OnValidSubmit="SaveProduct">
                <DataAnnotationsValidator />
                <div class="form-row">
                    <div class="form-group col-3">
                        <label> Name : </label>
                        <InputText @bind-Value="productModel.Name" class="form-control" />
                        <ValidationMessage For="@(() => productModel.Name)" />
                    </div>
                    <div class="form-group col-3">
                        <label> Price : </label>
                        <InputNumber @bind-Value="productModel.Price" class="form-control" />
                        <ValidationMessage For="@(() => productModel.Price)" />
                    </div>
                    <div class="form-group col-3">
                        <label> Stock : </label>
                        <InputNumber @bind-Value="productModel.Stock" class="form-control" />
                        <ValidationMessage For="@(() => productModel.Stock)" />
                    </div>
                    <div class="form-group col-3">
                        <label> Select Category</label>
                        @if (categoryList != null)
                        {
                            <select class="form-control" @onchange="@CategoryClicked">
                                <option value="">--Select--</option>
                                @foreach (var cat in categoryList)
                                {
                                    <option value="@cat.Id">@cat.Name</option>
                                }
                            </select>
                        }
                        <ValidationMessage For="@(()=>productModel.CategoryId)" />
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-3">
                        <label> Select Photo :</label>
                        <label style="border: 1px ridge #808080;">
                            <InputFile OnChange="@OnInputfileChange" multiple />
                        </label>
                        <ValidationMessage For="@(()=>productModel.FileName)" />

                        <table style="border:1px ridge #808080;">
                            <tr>
                                @foreach (var imgsrc in imageUrls)
                                {
                                    <td>
                                        <img src="@imgsrc" />
                                    </td>

                                }
                            </tr>
                        </table>
                    </div>
                </div>
                <div class="text-left">
                    <input type="submit" class="btn btn-primary" value="Save" />
                    <input type="button" class="btn btn-primary" value="Clear" @onclick="ClearForm" />
                </div>
            </EditForm>
            <div class="card-body">
                @if (productList == null)
                {
                    <p><em>Loading....</em></p>
                }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Price</th>
                                <th>Stock</th>
                                <th>Category</th>
                                <th>Delete</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var (index, prod) in productList.Select((prod, i) => (i + 1, prod)))
                            {
                                <tr>
                                    <td>@index</td>
                                    <td>@prod.Name</td>
                                    <td>@prod.Price</td>
                                    <td>@prod.Stock</td>
                                    <td>@prod.CategoryName</td>
                                    <td><input type="button" class="btn btn-primary" value="Delete" @onclick="(()=> DeleteButtonClick(prod))" /></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>

        </div>

    </div>
}

@if (showDeletePopup == true)
{
    <div class="modal">
        <div class=" modal-content">
            <div class="modal-header">
                <h5>Delete Category</h5>
                <span class="close" @onclick="ToggleDeletePopup">&times;</span>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <span style="background-color:yellow">@productToDelete.Name?</span> Category
            </div>
            <div class="modal-footer">

                <input type="button" class="btn btn-primary" value="Yes" @onclick="DeleteProduct" />
                <input type="button" class="btn btn-primary" value="No" @onclick="ToggleDeletePopup" />
            </div>
        </div>

    </div>
}

@if (SuccessPopup == true)
{
    <div class="modal">
        <div class=" modal-content">
            <div class="modal-header">
                Alert <span class="close" @onclick="ToggleSuccessPopup">&times;</span>
            </div>
            <div class="modal-body">
                @Message
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
            </div>
        </div>
    </div>
}




@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public List<CategoryModel> categoryList { get; set; }
    public ProductModel productModel { get; set; }
    public List<ProductModel> productList { get; set; }
    public int categoryId { get; set; }
    IReadOnlyList<IBrowserFile> selectedFiles;
    List<string> imageUrls = new List<string>();
    public ProductModel productToUpdate { get; set; }
    public ProductModel productToDelete { get; set; }
    public bool showEditPopup = false;
    public bool showDeletePopup = false;
    public bool SuccessPopup = false;
    public string Message = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        productModel = new ProductModel();
        await GetCategories();
        await GetProducts();
    }

    private async Task GetCategories()
    {
        categoryList = await AdminPanelService.GetCategories();
    }

    private async Task GetProducts()
    {
        productList = await AdminPanelService.GetProducts();
    }

    private void DeleteButtonClick(ProductModel _productToDelete)
    {
        productToDelete = _productToDelete;
        ToggleDeletePopup();
    }
    private void ToggleDeletePopup()
    {
        showDeletePopup = showDeletePopup == true ? false : true;
    }

    private void ToggleSuccessPopup()
    {
        SuccessPopup = SuccessPopup == true ? false : true;
    }


    private async Task SaveProduct()
    {
        Stream stream = selectedFiles.FirstOrDefault().OpenReadStream();
        MemoryStream ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        stream.Close();
        productModel.CategoryId = categoryId;
        productModel.FileName = selectedFiles.FirstOrDefault().Name;
        productModel.FileContent = ms.ToArray();
        ms.Close();

        await AdminPanelService.SaveProduct(productModel);
        await GetProducts();
        ClearForm();

    }
    private void ClearForm()
    {
        productModel = new ProductModel();
        imageUrls = new List<string>();
    }

    private void CategoryClicked(ChangeEventArgs categoryEvent)
    {
        if (!string.IsNullOrEmpty(Convert.ToString(categoryEvent.Value)))
        {
            categoryId = Convert.ToInt32(categoryEvent.Value);
            productModel.CategoryId = categoryId;
            this.StateHasChanged();
        }

    }
    private async Task OnInputfileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        productModel.FileName = string.Empty;
        foreach (var imageFile in selectedFiles)
        {
            var resizedImage = await imageFile.RequestImageFileAsync("image/jpg", 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            imageUrls.Add(imgData);
            productModel.FileName = imgData;

        }
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await notify.InvokeAsync();
        }
    }

    private async Task DeleteProduct()
    {
        productToDelete.FileName = "demofile";
        bool flag = await AdminPanelService.DeleteProduct(productToDelete);
        if (flag)
        {
            Message = "Product Deleted Sucessfully";
        }
        else Message = "try again later";
        ToggleSuccessPopup();
        productToDelete = new ProductModel();
        await GetProducts();
    }

}
