@page "/register"
@using Shop.DataModels.CustomModels;
@inject NavigationManager Navmanager;
@using Shop.Web.Services;
@inject ProtectedSessionStorage sessionstorage;
@inject IUserPanelService userpanelservice;

<style>
    .loginbox{
        font-family:'Open Sans',sans-serif;
        margin:0 auto 0 auto;
        width:100%;
        text-align:center;
        margin:20px 0px 20px 0px;
    }
    p{
        font-size:12px;
        text-decoration: none;
        color:#ffffff;
    }
    h1{
        font-size:1.5em;
        color:#525252;
    }
    .box{
        background:white;
        width:300px;
        border-radius:6px;
        margin:0 auto 0 auto;
        padding:0px 0px 70px 0px;
        border:#f5f542 4px solid;
    }
    .email{
        background:#ffffff;
        border:#ccc 1px solid;
        border-bottom:#ccc 2px solid;
        padding:8px;
        width: 250px;
        color:#525252;
        margin-top:10px;
        font-size:1em;
        border-radius:4px;
    }
    .password{
        border-radius:4px;
        background:#ecf0f1;
        border:#ccc 1px solid;
        padding:8px;
        width:250px;
        font-size:1em;
    }
    .btn{
        background:#2ecc71;
        width:125px;
        padding-top:5px;
        padding-bottom:5px;
        color:white;
        border-radius:4px;
        border:#27ae60 1px solid;
        margin-top:20px;
        margin-bottom:20px;
        float:left;
        margin-left:16px;
        font-weight:800;
        font-size:0.8em;
    }
    .btn:hover{
        background:#2cc06b;
    }
    #btn2{
        float:left;
        background:#3498db;
        width:125px;
        padding-top:5px;
        padding-bottom:5px;
        color:white;
        border-radius:4px;
        border:#2980b9 1px solid;
        margin-top:20px;
        margin-bottom:4px;
        margin-left:10px;
        font-weight:800;
        font-size:0.8em;
    }
    #btn2:hover{
        background:#525252;
    }

</style>


<div style="min-height:400px;">
    <div class="loginbox">
        <div class="box">
            <h1>Register</h1>
            <EditForm Model="@registerModel" OnValidSubmit="Register_click">
                <DataAnnotationsValidator />
                <InputText type="text" name="email" placeholder="Name" class="email" @bind-Value="registerModel.Name" autocomplete="off" />
                <ValidationMessage For="(()=>registerModel.Name)" />
                <InputText type="email" name="email" placeholder="email" class="email" @bind-Value="registerModel.Email" autocomplete="off" />
                <ValidationMessage For="(()=>registerModel.Email)" />
                <InputText type="text" name="mobilenumber" placeholder="mobilenumber" class="email" @bind-Value="registerModel.MobileNumber" autocomplete="off" />
                <ValidationMessage For="(()=>registerModel.MobileNumber)" />
                <InputText type="password" name="email" placeholder="password" class="email" @bind-Value="registerModel.Password" autocomplete="off" />
                <ValidationMessage For="(()=>registerModel.Password)" />
                <input type="submit" class="btn" value="Register"/>
                <a href="login"><div id="btn2"> Login </div></a>
            </EditForm>
            <div>
                <br />
                <br/>
                <p style="color:#e52e50;"><h4>@alertMessage</h4></p>    
            </div>
        </div>
    </div>


</div>




@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }
    public RegisterModel registerModel { get; set; }
    public string alertMessage { get; set; }



    protected override Task OnInitializedAsync()
    {
        registerModel = new RegisterModel();
        return base.OnInitializedAsync();
    }


    private async Task Register_click()
    {
        var response = await userpanelservice.RegisterUser(registerModel);
        if (response.Status)
        {
            var userresponse = response.Message.Split("|");
            await sessionstorage.SetAsync("userKey", userresponse[0]);
            await sessionstorage.SetAsync("userName", userresponse[1]);
            await sessionstorage.SetAsync("userEmail", userresponse[2]);
            await notify.InvokeAsync();
            Navmanager.NavigateTo("/");
        }
        else
        {
            alertMessage = response.Message;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var loginsession = await userpanelservice.IsUserLoggedIn();
            if (loginsession)
            {
                Navmanager.NavigateTo("/");
            }
            var checkoutsession = await sessionstorage.GetAsync<string>("checkoutAlert");
            if (checkoutsession.Success)
            {
                this.alertMessage = checkoutsession.Value;
                StateHasChanged();
            }
        }
    }
}
